name: Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest]

    steps:
    - name: Extract date and time (Windows) 
      if: matrix.os == 'windows-latest' 
      run: echo "TAG_NAME=$(Get-Date -Format 'yyyyMMdd-HHmmss')" >> $GITHUB_ENV

    - name: Echo tagname (Windows) 
      if: matrix.os == 'windows-latest' 
      run: echo "$TAG_NAME ${TAG_NAME} ${{ env.TAG_NAME }} $env.TAG_NAME $env:GITHUB_PATH"
      
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20' # Assicurati di utilizzare la versione di Node.js compatibile

    - name: Install dependencies
      run: npm install

    #- name: Build the app
    #  run: npm run build

    - name: Package the app
      run: npm run make

    - name: List files in out directory 
      if: matrix.os == 'windows-latest' 
      run: dir out\ 
      
    - name: List files in out directory 
      if: matrix.os != 'windows-latest' 
      run: ls -la out/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: out/

    - name: Extract tag name 
      id: extract_tag 
      if: 1 == 2
      uses: actions/github-script@v6 
      with: 
        script: | 
          const ref = process.env.GITHUB_REF; 
          const tagName = ref.replace('refs/heads/', ''); 
          core.setOutput('TAG_NAME', tagName);

    - name: Extract date and time 
      if: matrix.os != 'windows-latest'
      id: extract_datetime 
      run: echo "TAG_NAME=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

    - name: Extract date and time (Windows) 
      if: matrix.os == 'windows-latest' 
      run: echo "TAG_NAME=$(Get-Date -Format 'yyyyMMdd-HHmmss')" >> $GITHUB_ENV

    - name: Echo tagname (Windows) 
      if: matrix.os == 'windows-latest' 
      run: echo "$TAG_NAME ${TAG_NAME} ${{ env.TAG_NAME }} $env.TAG_NAME $env:GITHUB_PATH"

    - name: Rename artifacts with tag name 
      if: matrix.os == 'windows-latest' 
      run: |
        $zipFiles = Get-ChildItem -Path out\make\zip\win32\x64\*.zip
        foreach ($file in $zipFiles) {
          Copy-Item -Path $file.FullName -Destination ("out\mtc-repertoire-engine-${{ matrix.os }}-$TAG_NAME.zip")
        }
        $nupkgFiles = Get-ChildItem -Path out\make\squirrel.windows\x64\*.nupkg
        foreach ($file in $nupkgFiles) {
          Copy-Item -Path $file.FullName -Destination ("out\mtc-repertoire-engine-${{ matrix.os }}-$TAG_NAME.nupkg")
        }
        $setupFiles = Get-ChildItem -Path out\make\squirrel.windows\x64\*-setup.exe
        foreach ($file in $setupFiles) {
          Copy-Item -Path $file.FullName -Destination ("out\mtc-repertoire-engine-setup-${{ matrix.os }}-$TAG_NAME.exe")
        }  
    
    - name: List files in out directory 
      if: matrix.os == 'windows-latest' 
      run: dir out\ 

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: $TAG_NAME
        release_name: Release $TAG_NAME
        draft: true
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: out/mtc-repertoire-engine-${{ matrix.os }}-$TAG_NAME.zip
        asset_name: mtc-repertoire-engine-${{ matrix.os }}-$TAG_NAME.zip
        asset_content_type: application/zip
