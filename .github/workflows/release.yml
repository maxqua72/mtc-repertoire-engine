name: Release

on:
  push:
    tags:
      - 'v*' # Triggerato quando viene pushato un tag che inizia con "v" (es. v1.0.0)

jobs:
  release:
    name: Create Release
    runs-on: ${{ matrix.os }} # Esegue il job su diverse OS
    strategy:
      matrix:
        #os: [windows-latest, macos-latest, ubuntu-latest] 
        os: [windows-latest]
        arch: [x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci 

      - name: Build with Electron Forge
        run: npm run make

      - name: List files in out directory 
        if: matrix.os == 'windows-latest' 
        run: Get-ChildItem -Path ".\out\make\" -Recurse | Select-Object FullName

      - name: Ottieni la versione dal tag
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Copia gli asset di Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Copia il file zip
          mkdir -p ./out/assets
          cp -r ./out/make/zip/win32/x64/*.zip ./out/assets/
          cp -r ./out/make/squirrel.windows/x64/*.exe ./out/assets/
          cp -r ./out/make/squirrel.windows/x64/*.nupkg ./out/assets/
          cp ./out/make/squirrel.windows/x64/RELEASES ./out/assets/
          mv ./out/assets/mtc_repertoire_engine-${{ steps.get_version.outputs.VERSION }}-full.nupkg ./out/assets/mtc-repertoire-engine-${{ steps.get_version.outputs.VERSION }}-full.nupkg || exit 1
    
          #cp -r ./out/make/wix/*.msi ./out/assets/ 
      
      - name: List files in out directory 
        if: matrix.os == 'windows-latest' 
        run: dir out\assets 
  

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: ${{ contains(github.ref, '-draft') }}
          prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-rc') }} # Imposta prerelease se il tag contiene -beta o -rc

      - name: Upload Release Assets (Windows - ZIP)
        if: matrix.os == 'windows-latest' && false
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/assets/mtc-repertoire-engine-win32-${{ matrix.arch }}-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: mtc-repertoire-engine-win32-${{ matrix.arch }}-${{ steps.get_version.outputs.VERSION }}.zip # Aggiunta la versione
          asset_content_type: application/zip
  

      - name: Upload Release Assets (Windows - Squirrel)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/assets/mtc-repertoire-engine-${{ steps.get_version.outputs.VERSION }} Setup.exe
          asset_name: mtc-repertoire-engine-${{ steps.get_version.outputs.VERSION }} Setup.exe # Versione nell'installer
          asset_content_type: application/vnd.microsoft.portable-executable
      
      - name: Upload Release Assets (Windows - Squirrel nupkg)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/assets/mtc-repertoire-engine-${{ steps.get_version.outputs.VERSION }}-full.nupkg
          asset_name: mtc-repertoire-engine-${{ steps.get_version.outputs.VERSION }}-full.nupkg #Versione e architettura
          asset_content_type: application/octet-stream
      
      - name: Upload Release Assets (Windows - Squirrel RELEASES)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/assets/RELEASES
          asset_name: RELEASES
          asset_content_type: text/plain

      
      - name: Upload Release Assets (Windows - MSI)
        if: matrix.os == 'windows-latest' && false
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/wix/mtc-repertoire-engine-win32-${{ matrix.arch }}.msi
          asset_name: mtc-repertoire-engine-win32-${{ matrix.arch }}-${{ steps.get_version.outputs.VERSION }}.msi #Aggiunta la versione
          asset_content_type: application/vnd.msi

      - name: Upload Release Assets (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/mtc-repertoire-engine-darwin-${{ matrix.arch }}/mtc-repertoire-engine-darwin-${{ matrix.arch }}.zip
          asset_name: mtc-repertoire-engine-darwin-${{ matrix.arch }}-${{ steps.get_version.outputs.VERSION }}.zip # Aggiunta la versione
          asset_content_type: application/zip

      - name: Upload Release Assets (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/make/mtc-repertoire-engine-linux-${{ matrix.arch }}/mtc-repertoire-engine-linux-${{ matrix.arch }}.zip
          asset_name: mtc-repertoire-engine-linux-${{ matrix.arch }}-${{ steps.get_version.outputs.VERSION }}.zip # Aggiunta la versione
          asset_content_type: application/zip

